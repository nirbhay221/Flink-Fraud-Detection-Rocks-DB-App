Tumbling Window Operator Code Implementation: 
The following code uses the fraud detection job to process the transaction data in real-time and is able to detect the fraudulent activities where we used RocksDB as the state backend and a transaction source which produces the stream of transaction events and assigned timestamps and watermarks to the transaction events based on their timestamp field other than that we used the keyed process function to assing timestamps based on the accountID of the transaction and aggregated those transaction amounts per account using a tumbling window of different window sizes. And applied the fraud detection logic on the aggregated transactions for detecting the potential fraudulent activities. We also have used incremental mean aggregation which computes the mean of the transaction amounts per account in the sliding window and fraud detector function for checking the potential fraudulent activity based on the mean and standard deviation of the transaction amounts per accounts and we use parallelism of 4 by enabling parallelism on the rocksDB other than the following parallelism is added through key partition and we have exposed the latency and throughput to the prometheus api to view the latency and throughput of the following windows. In the following we enable checkpoinitng with an interval of 5 seconds too.

Sliding Window Operator Code Implementation: 
The following code uses the fraud detection job to process the transaction data in real-time and is able to detect the fraudulent activities where we used RocksDB as the state backend and a transaction source which produces the stream of transaction events and assigned timestamps and watermarks to the transaction events based on their timestamp field other than that we used the keyed process function to assing timestamps based on the accountID of the transaction and aggregated those transaction amounts per account using a sliding window of different window sizes with a slide of 1 minute. And applied the fraud detection logic on the aggregated transactions for detecting the potential fraudulent activities. We also have used incremental mean aggregation which computes the mean of the transaction amounts per account in the sliding window and fraud detector function for checking the potential fraudulent activity based on the mean and standard deviation of the transaction amounts per accounts and we use parallelism of 4 by enabling parallelism on the rocksDB other than the following parallelism is added through key partition and we have exposed the latency and throughput to the prometheus api to view the latency and throughput of the following windows.  
